{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SebastianOtero\\\\Documents\\\\Mindhub\\\\ItineraryApp\\\\client\\\\src\\\\components\\\\CityOption\\\\cityOptions.js\";\nimport React from 'react';\nimport AppNavbar from '../AppNavbar/AppNavBar';\nimport Footer from '../Footer/Footer';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport { getCities, getCity } from '../../actions/cityActions';\n\nclass cityOptions extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = event => {\n      // console.log(event.target.value)\n      this.props.getCity(event.target.value);\n    };\n\n    this.state = {\n      cities: [],\n      citySelected: []\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.getCities(); // llamo a la funcion que genera como prop en el dispatch\n\n    this.setState({\n      cities: this.props.cities\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(AppNavbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"idCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Id\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"idCity\",\n      id: \"idCity\",\n      placeholder: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), this.state.citySelected ? React.createElement(Input, {\n      type: \"text\",\n      name: \"idCity\",\n      id: \"idCity\",\n      placeholder: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }) : React.createElement(Input, {\n      type: \"text\",\n      name: \"idCity\",\n      id: \"idCity\",\n      placeholder: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"city\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"City\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"city\",\n      id: \"cityName\",\n      placeholder: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"country\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Country\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"country\",\n      id: \"countryName\",\n      placeholder: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"selectCountry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Select country\"), React.createElement(Input, {\n      type: \"select\",\n      name: \"select\",\n      id: \"selectCountry\",\n      onChange: this.getCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.state.cities.map(city => {\n      return React.createElement(\"option\", {\n        value: city._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, city.name);\n    }))), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Anadir ciudad\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Modificar ciudad\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Eliminar ciudad\")), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  //Voy a tomar el estado y lo voy a generar como propiedad para el componente\\\n  return {\n    cities: state.cityReducer.cities,\n    citySelected: state.cityReducer.city\n  };\n}; //regresa creadores de acciones (action creators)\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCities: () => dispatch(getCities()),\n    getCity: _id => dispatch(getCity(_id))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(cityOptions);","map":{"version":3,"sources":["C:/Users/SebastianOtero/Documents/Mindhub/ItineraryApp/client/src/components/CityOption/cityOptions.js"],"names":["React","AppNavbar","Footer","connect","Button","Form","FormGroup","Label","Input","FormText","getCities","getCity","cityOptions","Component","constructor","props","event","target","value","state","cities","citySelected","componentDidMount","setState","render","map","city","_id","name","mapStateToProps","cityReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport AppNavbar from '../AppNavbar/AppNavBar';\r\nimport Footer from '../Footer/Footer';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\nimport { getCities, getCity } from '../../actions/cityActions';\r\n\r\nclass cityOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cities: [],\r\n            citySelected: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.props.getCities() // llamo a la funcion que genera como prop en el dispatch\r\n        this.setState({\r\n            cities: this.props.cities\r\n        })\r\n    }\r\n\r\n    getCity = (event) => {\r\n        // console.log(event.target.value)\r\n        this.props.getCity(event.target.value)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <AppNavbar/>\r\n\r\n                <Form>\r\n                    <FormGroup>\r\n                        <Label for=\"idCity\">Id</Label>\r\n                        <Input type=\"text\" name=\"idCity\" id=\"idCity\" placeholder=\"\"/>\r\n                        {this.state.citySelected ? \r\n                            <Input type=\"text\" name=\"idCity\" id=\"idCity\" placeholder=\"\"/> : \r\n                            <Input type=\"text\" name=\"idCity\" id=\"idCity\" placeholder=\"\"/>}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"city\">City</Label>\r\n                        <Input type=\"text\" name=\"city\" id=\"cityName\" placeholder=\"\" />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"country\">Country</Label>\r\n                        <Input type=\"text\" name=\"country\" id=\"countryName\" placeholder=\"\" />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"selectCountry\">Select country</Label>\r\n                        <Input type=\"select\" name=\"select\" id=\"selectCountry\" onChange={this.getCity}>\r\n                        {this.state.cities.map( city => {return <option value={city._id}>{city.name}</option>} )}\r\n                        {/* {this.state.data[0].map( x => { return <option>{x}</option> })} */}\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <Button>Anadir ciudad</Button>\r\n                    <br></br>\r\n                    <Button>Modificar ciudad</Button>\r\n                    <br></br>\r\n                    <Button>Eliminar ciudad</Button>\r\n                    </Form> \r\n                <Footer/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    //Voy a tomar el estado y lo voy a generar como propiedad para el componente\\\r\n    return {\r\n        cities: state.cityReducer.cities,\r\n        citySelected: state.cityReducer.city\r\n    };\r\n};\r\n\r\n//regresa creadores de acciones (action creators)\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCities: () => dispatch(getCities()),\r\n        getCity: (_id) => dispatch(getCity(_id))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(cityOptions);\r\n"]},"metadata":{},"sourceType":"module"}