{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SebastianOtero\\\\Documents\\\\Mindhub\\\\ItineraryApp\\\\client\\\\src\\\\components\\\\CityOption\\\\cityOptions.js\";\nimport React from 'react';\nimport AppNavbar from '../AppNavbar/AppNavBar';\nimport Footer from '../Footer/Footer';\nimport { connect } from 'react-redux';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport { getCities, getCity, addCity } from '../../actions/cityActions';\n\nclass cityOptions extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getCity = async event => {\n      // console.log(event.target.value)\n      await this.props.getCity(event.target.value);\n      this.setState({\n        citySelected: this.props.citySelected\n      });\n    };\n\n    this.collectData = () => {\n      console.log(this.state.city);\n    };\n\n    this.state = {\n      cities: [],\n      citySelected: []\n    };\n  }\n\n  async componentDidMount() {\n    await this.props.getCities(); // llamo a la funcion que genera como prop en el dispatch\n\n    this.setState({\n      cities: this.props.cities\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(AppNavbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"idCity\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Id\"), this.state.citySelected != [] ? React.createElement(Input, {\n      type: \"text\",\n      name: \"idCity\",\n      id: \"idCity\",\n      placeholder: \"\",\n      value: this.props.citySelected._id,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }) : React.createElement(Input, {\n      type: \"text\",\n      name: \"idCity\",\n      id: \"idCity\",\n      placeholder: \"\",\n      value: \"asd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"city\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"City\"), this.state.citySelected != [] ? React.createElement(Input, {\n      type: \"text\",\n      name: \"city\",\n      id: \"cityName\",\n      placeholder: \"\",\n      value: this.props.citySelected.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }) : React.createElement(Input, {\n      type: \"text\",\n      name: \"city\",\n      id: \"cityName\",\n      placeholder: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"country\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Country\"), this.state.citySelected != [] ? React.createElement(Input, {\n      type: \"text\",\n      name: \"country\",\n      id: \"countryName\",\n      placeholder: \"\",\n      value: this.props.citySelected.country,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }) : React.createElement(Input, {\n      type: \"text\",\n      name: \"country\",\n      id: \"countryName\",\n      placeholder: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"selectCountry\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Select country\"), React.createElement(Input, {\n      type: \"select\",\n      name: \"select\",\n      id: \"selectCountry\",\n      onChange: this.getCity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      selected: true,\n      disabled: true,\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Choose here\"), this.state.cities.map(city => {\n      return React.createElement(\"option\", {\n        value: city._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, city.name);\n    }))), React.createElement(Button, {\n      onClick: this.collectData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Anadir ciudad\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Modificar ciudad\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Eliminar ciudad\")), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  //Voy a tomar el estado y lo voy a generar como propiedad para el componente\\\n  return {\n    cities: state.cityReducer.cities,\n    citySelected: state.cityReducer.city\n  };\n}; //regresa creadores de acciones (action creators)\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCities: () => dispatch(getCities()),\n    getCity: _id => dispatch(getCity(_id)),\n    addCity: cityData => dispatch(addCity(cityData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(cityOptions);","map":{"version":3,"sources":["C:/Users/SebastianOtero/Documents/Mindhub/ItineraryApp/client/src/components/CityOption/cityOptions.js"],"names":["React","AppNavbar","Footer","connect","Button","Form","FormGroup","Label","Input","FormText","getCities","getCity","addCity","cityOptions","Component","constructor","props","event","target","value","setState","citySelected","collectData","console","log","state","city","cities","componentDidMount","render","_id","name","country","map","mapStateToProps","cityReducer","mapDispatchToProps","dispatch","cityData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,KAAzC,EAAgDC,QAAhD,QAAgE,YAAhE;AAEA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,OAA7B,QAA4C,2BAA5C;;AAEA,MAAMC,WAAN,SAA0Bb,KAAK,CAACc,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAenBL,OAfmB,GAeT,MAAOM,KAAP,IAAiB;AACvB;AACA,YAAM,KAAKD,KAAL,CAAWL,OAAX,CAAmBM,KAAK,CAACC,MAAN,CAAaC,KAAhC,CAAN;AACA,WAAKC,QAAL,CAAc;AACVC,QAAAA,YAAY,EAAE,KAAKL,KAAL,CAAWK;AADf,OAAd;AAGH,KArBkB;;AAAA,SAuBnBC,WAvBmB,GAuBL,MAAM;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,IAAvB;AACH,KAzBkB;;AAEf,SAAKD,KAAL,GAAa;AACTE,MAAAA,MAAM,EAAE,EADC;AAETN,MAAAA,YAAY,EAAE;AAFL,KAAb;AAIH;;AAED,QAAMO,iBAAN,GAA0B;AACtB,UAAM,KAAKZ,KAAL,CAAWN,SAAX,EAAN,CADsB,CACO;;AAC7B,SAAKU,QAAL,CAAc;AACVO,MAAAA,MAAM,EAAE,KAAKX,KAAL,CAAWW;AADT,KAAd;AAGH;;AAcDE,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAGM,KAAKJ,KAAL,CAAWJ,YAAX,IAA2B,EAA3B,GACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,QAAxB;AAAiC,MAAA,EAAE,EAAC,QAApC;AAA6C,MAAA,WAAW,EAAC,EAAzD;AAA4D,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWK,YAAX,CAAwBS,GAA3F;AAAiG,MAAA,QAAQ,MAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,QAAxB;AAAiC,MAAA,EAAE,EAAC,QAApC;AAA6C,MAAA,WAAW,EAAC,EAAzD;AAA4D,MAAA,KAAK,EAAC,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALR,CADJ,EAQI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEM,KAAKL,KAAL,CAAWJ,YAAX,IAA2B,EAA3B,GACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,EAAE,EAAC,UAAlC;AAA6C,MAAA,WAAW,EAAC,EAAzD;AAA4D,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWK,YAAX,CAAwBU,IAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,EAAE,EAAC,UAAlC;AAA6C,MAAA,WAAW,EAAC,EAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,CARJ,EAeI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEM,KAAKN,KAAL,CAAWJ,YAAX,IAA2B,EAA3B,GACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,SAAxB;AAAkC,MAAA,EAAE,EAAC,aAArC;AAAmD,MAAA,WAAW,EAAC,EAA/D;AAAkE,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWK,YAAX,CAAwBW,OAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,GAEE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,SAAxB;AAAkC,MAAA,EAAE,EAAC,aAArC;AAAmD,MAAA,WAAW,EAAC,EAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJR,CAfJ,EAqBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,eAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,IAAI,EAAC,QAA1B;AAAmC,MAAA,EAAE,EAAC,eAAtC;AAAsD,MAAA,QAAQ,EAAE,KAAKrB,OAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAQ,MAAA,KAAK,EAAC,EAAd;AAAiB,MAAA,QAAQ,MAAzB;AAA0B,MAAA,QAAQ,MAAlC;AAAmC,MAAA,MAAM,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADA,EAEC,KAAKc,KAAL,CAAWE,MAAX,CAAkBM,GAAlB,CAAuBP,IAAI,IAAI;AAAC,aAAO;AAAQ,QAAA,KAAK,EAAEA,IAAI,CAACI,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0BJ,IAAI,CAACK,IAA/B,CAAP;AAAqD,KAArF,CAFD,CAFJ,CArBJ,EA6BI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKT,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA7BJ,EA8BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BJ,EA+BI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BA/BJ,EAgCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCJ,EAiCI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAjCJ,CAHJ,EAsCI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtCJ,CADJ;AA0CH;;AAvEqC;;AA0E1C,MAAMY,eAAe,GAAIT,KAAD,IAAW;AAC/B;AACA,SAAO;AACHE,IAAAA,MAAM,EAAEF,KAAK,CAACU,WAAN,CAAkBR,MADvB;AAEHN,IAAAA,YAAY,EAAEI,KAAK,CAACU,WAAN,CAAkBT;AAF7B,GAAP;AAIH,CAND,C,CAQA;;;AACA,MAAMU,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAO;AACH3B,IAAAA,SAAS,EAAE,MAAM2B,QAAQ,CAAC3B,SAAS,EAAV,CADtB;AAEHC,IAAAA,OAAO,EAAGmB,GAAD,IAASO,QAAQ,CAAC1B,OAAO,CAACmB,GAAD,CAAR,CAFvB;AAGHlB,IAAAA,OAAO,EAAG0B,QAAD,IAAcD,QAAQ,CAACzB,OAAO,CAAC0B,QAAD,CAAR;AAH5B,GAAP;AAKH,CAND;;AAQA,eAAenC,OAAO,CAAC+B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CvB,WAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport AppNavbar from '../AppNavbar/AppNavBar';\r\nimport Footer from '../Footer/Footer';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\r\n\r\nimport { getCities, getCity, addCity } from '../../actions/cityActions';\r\n\r\nclass cityOptions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cities: [],\r\n            citySelected: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.props.getCities() // llamo a la funcion que genera como prop en el dispatch\r\n        this.setState({\r\n            cities: this.props.cities,\r\n        })\r\n    }\r\n\r\n    getCity = async (event) => {\r\n        // console.log(event.target.value)\r\n        await this.props.getCity(event.target.value)\r\n        this.setState({\r\n            citySelected: this.props.citySelected,\r\n        })\r\n    }\r\n\r\n    collectData = () => {\r\n        console.log(this.state.city)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <AppNavbar/>\r\n\r\n                <Form>\r\n                    <FormGroup>\r\n                        <Label for=\"idCity\">Id</Label>\r\n                        {/* <Input type=\"text\" name=\"idCity\" id=\"idCity\" placeholder=\"\"/> */}\r\n                        { this.state.citySelected != [] ?  \r\n                            <Input type=\"text\" name=\"idCity\" id=\"idCity\" placeholder=\"\" value={this.props.citySelected._id } disabled/> : \r\n                            <Input type=\"text\" name=\"idCity\" id=\"idCity\" placeholder=\"\" value=\"asd\"/>}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"city\">City</Label>\r\n                        { this.state.citySelected != [] ?  \r\n                            <Input type=\"text\" name=\"city\" id=\"cityName\" placeholder=\"\" value={this.props.citySelected.name } /> : \r\n                            <Input type=\"text\" name=\"city\" id=\"cityName\" placeholder=\"\" />}\r\n                        \r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"country\">Country</Label>\r\n                        { this.state.citySelected != [] ?  \r\n                            <Input type=\"text\" name=\"country\" id=\"countryName\" placeholder=\"\" value={this.props.citySelected.country }/> : \r\n                            <Input type=\"text\" name=\"country\" id=\"countryName\" placeholder=\"\" />}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"selectCountry\">Select country</Label>\r\n                        <Input type=\"select\" name=\"select\" id=\"selectCountry\" onChange={this.getCity}>\r\n                        <option value=\"\" selected disabled hidden>Choose here</option>\r\n                        {this.state.cities.map( city => {return <option value={city._id}>{city.name}</option>} )}\r\n                        {/* {this.state.data[0].map( x => { return <option>{x}</option> })} */}\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <Button onClick={this.collectData} >Anadir ciudad</Button>\r\n                    <br></br>\r\n                    <Button>Modificar ciudad</Button>\r\n                    <br></br>\r\n                    <Button>Eliminar ciudad</Button>\r\n                    </Form> \r\n                <Footer/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    //Voy a tomar el estado y lo voy a generar como propiedad para el componente\\\r\n    return {\r\n        cities: state.cityReducer.cities,\r\n        citySelected: state.cityReducer.city\r\n    };\r\n};\r\n\r\n//regresa creadores de acciones (action creators)\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCities: () => dispatch(getCities()),\r\n        getCity: (_id) => dispatch(getCity(_id)),\r\n        addCity: (cityData) => dispatch(addCity(cityData))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(cityOptions);\r\n"]},"metadata":{},"sourceType":"module"}