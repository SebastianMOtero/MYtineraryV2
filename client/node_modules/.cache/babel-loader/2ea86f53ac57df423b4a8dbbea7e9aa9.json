{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SebastianOtero\\\\Documents\\\\Mindhub\\\\ItineraryApp\\\\client\\\\src\\\\components\\\\CitiesPage\\\\Cities.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { ListGroup, Input } from 'reactstrap';\nimport AppNavBar from '../AppNavbar/AppNavBar';\nimport CityBox from '../CityBox/CityBox';\nimport './Cities.css'; // actions importadas\n\nimport { getCities } from '../../actions/cityActions';\n\nclass CitiesPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.filterCities = e => {\n      let filteredCities = this.props.cities; //recibo las\n\n      filteredCities = filteredCities.filter(city => {\n        let cityName = city.name.toLowerCase() + city.country.toLowerCase();\n        return cityName.indexOf(e.target.value.toLowerCase()) === 0;\n      });\n      this.setState({\n        cities: filteredCities\n      });\n    };\n\n    this.state = {\n      cities: [],\n      loading: false\n    };\n  } //this.setState({animal : 'qwe' })\n  // filterCities = (e) => {\n  //     let filteredCities = this.props.cities; //recibo las\n  //     filteredCities = filteredCities.filter((city) => {\n  //         let cityName = city.name.toLowerCase()\n  //         return cityName.indexOf(\n  //             e.target.value.toLowerCase()) === 0\n  //     })\n  //     this.setState({cities: filteredCities })\n  // }\n\n\n  async componentDidMount() {\n    await this.props.getCities(); // llamo a la funcion que genera como prop en el dispatch\n\n    this.setState({\n      cities: this.props.cities,\n      loading: this.props.loading\n    });\n    console.log('asd');\n    console.log(this.props);\n    console.log();\n    this.filterCities();\n  }\n\n  render() {\n    // console.log('props');\n    const asd = this.props.cities;\n    console.log(asd);\n    console.log(\"render\");\n    console.log(this.props); //contiene el metodo getCities y el array cities\n    //props se mantienen estable a partir de que se crea el proyecto\n\n    console.log(this.state); //Hace referencia al estado actual, no tiene \n    // console.log('estado ');\n    // // const  asd  = this.props.cities;\n    // // console.log({asd});\n    // // this.setState({ cities: this.props.cities })\n    // console.log( this.state.filteredCities ) \n    // this.setState({cities:this.props.cities})\n    // this.setState({ filterCities: this.props.filterCities})\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(AppNavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(Input, {\n      type: \"filter\",\n      name: \"cityFilter\",\n      id: \"cityFilter\",\n      placeholder: \"Search your city...\",\n      onChange: this.filterCities,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), this.props.loading === true && React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"ESPERA\"), React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, cities.map(city => React.createElement(CityBox, {\n      key: city._id,\n      city: city,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }))));\n  }\n\n} //ACA ARRANCA EL PROGRAMA\n\n\nconst mapStateToProps = state => {\n  //Voy a tomar el estado y lo voy a generar como propiedad para el componente\\\n  console.log(state);\n  return {\n    cities: state.cities.cities,\n    loading: state.cities.loading\n  };\n}; //regresa creadores de acciones (action creators)\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCities: () => dispatch(getCities())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesPage);","map":{"version":3,"sources":["C:/Users/SebastianOtero/Documents/Mindhub/ItineraryApp/client/src/components/CitiesPage/Cities.js"],"names":["React","connect","ListGroup","Input","AppNavBar","CityBox","getCities","CitiesPage","Component","constructor","props","filterCities","e","filteredCities","cities","filter","city","cityName","name","toLowerCase","country","indexOf","target","value","setState","state","loading","componentDidMount","console","log","render","asd","map","_id","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ListGroup, Input } from 'reactstrap';\r\nimport AppNavBar from '../AppNavbar/AppNavBar';\r\nimport CityBox from '../CityBox/CityBox';\r\nimport './Cities.css';\r\n// actions importadas\r\nimport { getCities } from '../../actions/cityActions';\r\n\r\nclass CitiesPage extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            cities: [],\r\n            loading: false\r\n        };\r\n    }\r\n\r\n    //this.setState({animal : 'qwe' })\r\n\r\n    // filterCities = (e) => {\r\n    //     let filteredCities = this.props.cities; //recibo las\r\n    //     filteredCities = filteredCities.filter((city) => {\r\n    //         let cityName = city.name.toLowerCase()\r\n    //         return cityName.indexOf(\r\n    //             e.target.value.toLowerCase()) === 0\r\n    //     })\r\n    //     this.setState({cities: filteredCities })\r\n    // }\r\n\r\n     async componentDidMount() {\r\n        await this.props.getCities() // llamo a la funcion que genera como prop en el dispatch\r\n        this.setState({\r\n            cities: this.props.cities,\r\n            loading: this.props.loading\r\n        })\r\n        console.log('asd')\r\n        console.log(this.props)\r\n        console.log()\r\n        this.filterCities()\r\n    }\r\n\r\n     filterCities = (e) => { \r\n        let filteredCities = this.props.cities; //recibo las\r\n        filteredCities = filteredCities.filter((city) => {\r\n          let cityName = city.name.toLowerCase() + city.country.toLowerCase()\r\n          return cityName.indexOf(\r\n            e.target.value.toLowerCase()) === 0\r\n        })\r\n        this.setState({\r\n          cities: filteredCities\r\n        })\r\n       }\r\n\r\n    render() {  \r\n        // console.log('props');\r\n        const asd = this.props.cities\r\n        console.log(asd);\r\n        console.log(\"render\");\r\n\r\n        console.log(this.props); //contiene el metodo getCities y el array cities\r\n        //props se mantienen estable a partir de que se crea el proyecto\r\n        console.log(this.state); //Hace referencia al estado actual, no tiene \r\n        // console.log('estado ');\r\n        // // const  asd  = this.props.cities;\r\n        // // console.log({asd});\r\n        // // this.setState({ cities: this.props.cities })\r\n        // console.log( this.state.filteredCities ) \r\n        // this.setState({cities:this.props.cities})\r\n        // this.setState({ filterCities: this.props.filterCities})\r\n           \r\n        return(\r\n            <div>  \r\n                <AppNavBar/>\r\n                <Input type=\"filter\" name=\"cityFilter\" id=\"cityFilter\" \r\n                        placeholder=\"Search your city...\" onChange={this.filterCities}/>\r\n                { this.props.loading === true && <h1>ESPERA</h1> }\r\n                {}\r\n                <ListGroup>\r\n                    {cities.map( (city) => <CityBox key={city._id} city={city}/> )}              \r\n                </ListGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//ACA ARRANCA EL PROGRAMA\r\nconst mapStateToProps = (state) => {\r\n    //Voy a tomar el estado y lo voy a generar como propiedad para el componente\\\r\n    console.log(state)\r\n    return {\r\n        cities: state.cities.cities,\r\n        loading: state.cities.loading,\r\n    };\r\n};\r\n\r\n//regresa creadores de acciones (action creators)\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCities: () => dispatch(getCities()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesPage);\r\n"]},"metadata":{},"sourceType":"module"}