{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SebastianOtero\\\\Documents\\\\Mindhub\\\\ItineraryApp\\\\client\\\\src\\\\components\\\\CitiesPage\\\\Cities.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { ListGroup, Input } from 'reactstrap';\nimport AppNavBar from '../AppNavbar/AppNavBar';\nimport CityBox from '../CityBox/CityBox';\nimport './Cities.css'; // actions importadas\n\nimport { getCities, filterCities } from '../../actions/cityActions';\n\nclass CitiesPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.filterCities = e => {\n      this.props.filterCities(e.target.value.toLowerCase()); //     let filteredCities = this.props.cities; //recibo las\n      //     filteredCities = filteredCities.filter((city) => {\n      //       let cityName = city.name.toLowerCase() + city.country.toLowerCase()\n      //       return cityName.indexOf(\n      //         e.target.value.toLowerCase()) === 0\n      //     })\n      //     this.setState({\n      //       filteredCities: filteredCities\n      //     })\n    };\n\n    this.state = {\n      cities: [],\n      loading: true,\n      filterCities: []\n    };\n  } //this.setState({animal : 'qwe' })\n  // filterCities = (e) => {\n  //     let filteredCities = this.props.cities; //recibo las\n  //     filteredCities = filteredCities.filter((city) => {\n  //         let cityName = city.name.toLowerCase()\n  //         return cityName.indexOf(\n  //             e.target.value.toLowerCase()) === 0\n  //     })\n  //     this.setState({cities: filteredCities })\n  // }\n\n\n  componentDidMount() {\n    this.props.getCities(); // llamo a la funcion que genera como prop en el dispatch\n\n    console.log('asd');\n    console.log(this.props);\n    console.log();\n  }\n\n  render() {\n    // console.log('props');\n    const asd = this.props.cities.asd;\n    console.log(\"render\");\n    console.log(asd);\n    console.log(this.props); //contiene el metodo getCities y el array cities\n    //props se mantienen estable a partir de que se crea el proyecto\n\n    console.log(this.state); //Hace referencia al estado actual, no tiene \n    // console.log('estado ');\n    // // const  asd  = this.props.cities;\n    // // console.log({asd});\n    // // this.setState({ cities: this.props.cities })\n    // console.log( this.state.filteredCities ) \n\n    this.setState({\n      cities: this.props.cities\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(AppNavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(Input, {\n      type: \"filter\",\n      name: \"cityFilter\",\n      id: \"cityFilter\",\n      placeholder: \"Search your city...\",\n      onChange: this.filterCities,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), this.props.loading === true && React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"ESPERA\"), React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, this.state.cities.map(city => React.createElement(CityBox, {\n      key: city._id,\n      city: city,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }))));\n  }\n\n} //ACA ARRANCA EL PROGRAMA\n\n\nconst mapStateToProps = state => {\n  //Voy a tomar el estado y lo voy a generar como propiedad para el componente\\\n  console.log(state);\n  return {\n    cities: state.cities.cities,\n    loading: state.cities.loading,\n    filterCities: state.cities.filterCities\n  };\n}; //regresa creadores de acciones (action creators)\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCities: () => dispatch(getCities()),\n    filterCities: e => dispatch(filterCities(e))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesPage);","map":{"version":3,"sources":["C:/Users/SebastianOtero/Documents/Mindhub/ItineraryApp/client/src/components/CitiesPage/Cities.js"],"names":["React","connect","ListGroup","Input","AppNavBar","CityBox","getCities","filterCities","CitiesPage","Component","constructor","props","e","target","value","toLowerCase","state","cities","loading","componentDidMount","console","log","render","asd","setState","map","city","_id","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ListGroup, Input } from 'reactstrap';\r\nimport AppNavBar from '../AppNavbar/AppNavBar';\r\nimport CityBox from '../CityBox/CityBox';\r\nimport './Cities.css';\r\n// actions importadas\r\nimport { getCities, filterCities } from '../../actions/cityActions';\r\n\r\nclass CitiesPage extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            cities: [],\r\n            loading: true,\r\n            filterCities: []\r\n        };\r\n    }\r\n\r\n    //this.setState({animal : 'qwe' })\r\n\r\n    // filterCities = (e) => {\r\n    //     let filteredCities = this.props.cities; //recibo las\r\n    //     filteredCities = filteredCities.filter((city) => {\r\n    //         let cityName = city.name.toLowerCase()\r\n    //         return cityName.indexOf(\r\n    //             e.target.value.toLowerCase()) === 0\r\n    //     })\r\n    //     this.setState({cities: filteredCities })\r\n    // }\r\n\r\n     componentDidMount() {\r\n        this.props.getCities() // llamo a la funcion que genera como prop en el dispatch\r\n        console.log('asd')\r\n        console.log(this.props)\r\n        console.log()\r\n      \r\n\r\n    }\r\n\r\n     filterCities = (e) => { this.props.filterCities(e.target.value.toLowerCase())\r\n    //     let filteredCities = this.props.cities; //recibo las\r\n    //     filteredCities = filteredCities.filter((city) => {\r\n    //       let cityName = city.name.toLowerCase() + city.country.toLowerCase()\r\n    //       return cityName.indexOf(\r\n    //         e.target.value.toLowerCase()) === 0\r\n    //     })\r\n    //     this.setState({\r\n    //       filteredCities: filteredCities\r\n    //     })\r\n       }\r\n\r\n    render() {  \r\n        // console.log('props');\r\n        const { asd } = this.props.cities\r\n        console.log(\"render\");\r\n        console.log(asd);\r\n        console.log(this.props); //contiene el metodo getCities y el array cities\r\n        //props se mantienen estable a partir de que se crea el proyecto\r\n        console.log(this.state); //Hace referencia al estado actual, no tiene \r\n        // console.log('estado ');\r\n        // // const  asd  = this.props.cities;\r\n        // // console.log({asd});\r\n        // // this.setState({ cities: this.props.cities })\r\n        // console.log( this.state.filteredCities ) \r\n        this.setState({cities:this.props.cities})   \r\n        return(\r\n            <div>  \r\n                <AppNavBar/>\r\n                <Input type=\"filter\" name=\"cityFilter\" id=\"cityFilter\" \r\n                        placeholder=\"Search your city...\" onChange={this.filterCities}/>\r\n                { this.props.loading === true && <h1>ESPERA</h1> }\r\n                <ListGroup>\r\n                    {this.state.cities.map( (city) => <CityBox key={city._id} city={city}/> )}              \r\n                </ListGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//ACA ARRANCA EL PROGRAMA\r\nconst mapStateToProps = (state) => {\r\n    //Voy a tomar el estado y lo voy a generar como propiedad para el componente\\\r\n    console.log(state)\r\n    return {\r\n        cities: state.cities.cities,\r\n        loading: state.cities.loading,\r\n        filterCities: state.cities.filterCities\r\n    };\r\n};\r\n\r\n//regresa creadores de acciones (action creators)\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getCities: () => dispatch(getCities()),\r\n        filterCities: (e) => dispatch(filterCities(e))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesPage);\r\n"]},"metadata":{},"sourceType":"module"}